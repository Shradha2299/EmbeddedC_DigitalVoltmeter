// PIC18F6520 Configuration Bit Settings

//'C' source line config statements

//CONFIG1H
#pragma config OSC = HS      // Oscillator Selection bits (HS Oscillator)
#pragma config OSCS = OFF    // Oscillator System Clock Switch Enable bit (Oscillator system clock switch oprion is disabled (main oscillator is source))

//CONFIG2L
#pragma config PWRT = OFF    // Power-up Timer Enable Bit (PWRT Disabled) 
#pragma config BOR = ON      // Brown-out Reset Enable Bit (Brown-Out Reset Enabled)
#pragma config BORV = 25     // Brown-out Reser Voltage Bits (VBOR set to 2.5V)

//CONFIG2H
#pragma config WDT = OFF     // Watchdog Timer Enable bit(WDT disabled)
#pragma config WDTPS = 128   // Watchdog Timer Postscale Select bits(1:128)

//CONFIG3L

//CONFIG3H
#pragma config CCP2MUX = ON  // CCP2 Mux bit (CCP2 input/output is multiplexed with RC1)

//CONFIG4L
#pragma config STVR = ON     // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF     // Low-Voltage ICSP Enable Bit (Low voltage ICSP disabled)

//CONFIG5L
#pragma config CP0 = OFF     // Code Protection bit (Block 0(000800-001FFFh) not code-protected)
#pragma config CP1 = OFF     // Code Protection bit (Block 1(002000-003FFFh) not code-protected)
#pragma config CP2 = OFF     // Code Protection bit (Block 2(004000-005FFFh) not code-protected)
#pragma config CP3 = OFF     // Code Protection bit (Block 3(006000-007FFFh) not code-protected)

//CONFIG5H
#pragma config CPB = OFF     // Boot Block Code Protection bit (Boot Block(000000-0007FFh) not code-protected)
#pragma config CPD = OFF     // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

//CONFIG6L
#pragma config WRT0 = OFF    // Write Protection bit (Block 0(000800-001FFFh) not write-protected)
#pragma config WRT1 = OFF    // Write Protection bit (Block 1(002000-003FFFh) not write-protected)
#pragma config WRT2 = OFF    // Write Protection bit (Block 2(004000-005FFFh) not write-protected)
#pragma config WRT3 = OFF    // Write Protection bit (Block 3(006000-007FFFh) not write-protected)

//CONFIG6H
#pragma config WRTC = OFF     // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF     // Boot Block Write Protection bit (Boot Block (000000-0000FFh) not write-protected)
#pragma config WRTD = OFF     // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

//CONFIG7L
#pragma config EBTR0 = OFF    // Table Read Protection bit (Block 0(000800-001FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF    // Table Read Protection bit (Block 1(002000-003FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF    // Table Read Protection bit (Block 2(004000-005FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF    // Table Read Protection bit (Block 3(006000-007FFFh) not protected from table reads executed in other blocks)

//CONFIG7H
#pragma config EBTRB = OFF    // Boot Block Table Read Pretection bit (Boot Block (000000-0000FFh) not protected from table reads executed in other blocks)

//#pragma config statements should precede project file includes.
//Use project enums instead of #define for ON ans OFF.

#include <xc.h>
//#include "adc.h"
#include <stdio.h>
#include <pic18f6520.h>
#include <htc.h>
#include "lcd1.h"
#define _XTAL_FREQ 8000000

unsigned int R=560;
float current, voltage;

void lcd_int() {
  //unsigned int a;
  TRISD = 0x00;
  TRISG = 0x00;
  Lcd_Start();

  Lcd_Clear();
  Lcd_Set_Cursor(1,1);
  Lcd_Print_String("CURRENT VOLTAGE");
  __delay_ms(2000);
}

void Lcd_VI() {
  //unsigned int a;
  char s[20];
  TRISD = 0x00;
  TRISG = 0x00;

  Lcd_Clear();

  sprintf(s, "CURRENT=%.3fA", current);
  Lcd_Set_Cursor(1,1);
  Lcd_Print_String(s);

  sprintf(s, "VOLTAGE=%.3fV", voltage);
  Lcd_Set_Cursor(2,1);
  Lcd_Print_String(s);

  __delay_ms(1000);
}

void current_cal() {
  unsigned int reglow, reghigh;
  ADCON1 = 0x0E;
  ADCON0 = 0x00;
  ADCON2 = 0x80;
  ADCON0bits.ADON = 1;

  __delay_us(50);

  ADCON0bits.GO = 1;

  while(ADCON0bits.GO == 1);

  reglow = ADRESL;
  reghigh = ADRESH;

  voltage = ((reghigh*256)+reglow)*0.00488;
  current = voltage/R;
  __delay_us(1);
}

void init() {
  TRISC = 0x00;       // Configure PORTD as output
  TRISB = 0x00;
  TRISAbits.RA0 = 1;  // Configure RA0 as input
}

void main(void) {
  init();
  lcd_int();
  while(1)
  {
    current_cal();
    __delay_us(10);
    Lcd_VI();
  }
}
 
